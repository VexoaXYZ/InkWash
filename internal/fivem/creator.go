package fivem

import (
	"fmt"
	"os"
	"path/filepath"
)

type ServerConfig struct {
	Name     string
	Path     string
	Template string
}

type ServerCreator struct {
	config ServerConfig
}

func NewServerCreator() *ServerCreator {
	return &ServerCreator{}
}

func (sc *ServerCreator) Create(config ServerConfig) error {
	sc.config = config

	serverPath := filepath.Join(config.Path, config.Name)
	
	if _, err := os.Stat(serverPath); !os.IsNotExist(err) {
		return fmt.Errorf("server directory already exists: %s", serverPath)
	}

	if err := os.MkdirAll(serverPath, 0755); err != nil {
		return fmt.Errorf("failed to create server directory: %w", err)
	}

	if err := sc.downloadArtifacts(serverPath); err != nil {
		return fmt.Errorf("failed to download FiveM artifacts: %w", err)
	}

	if err := sc.cleanupUnnecessaryFiles(serverPath); err != nil {
		return fmt.Errorf("failed to cleanup files: %w", err)
	}

	if err := sc.applyTemplate(serverPath); err != nil {
		return fmt.Errorf("failed to apply template: %w", err)
	}

	if err := sc.createDefaultConfig(serverPath); err != nil {
		return fmt.Errorf("failed to create default config: %w", err)
	}

	return nil
}

func (sc *ServerCreator) downloadArtifacts(serverPath string) error {
	fmt.Println("üì• Downloading FiveM artifacts...")
	return nil
}

func (sc *ServerCreator) cleanupUnnecessaryFiles(serverPath string) error {
	fmt.Println("üßπ Cleaning up unnecessary files...")
	
	filesToRemove := []string{
		"citizen/system_resources/monitor",
		"alpine",
		"node_modules",
	}

	for _, file := range filesToRemove {
		path := filepath.Join(serverPath, file)
		os.RemoveAll(path)
	}

	return nil
}

func (sc *ServerCreator) applyTemplate(serverPath string) error {
	fmt.Printf("üé® Applying '%s' template...\n", sc.config.Template)
	return nil
}

func (sc *ServerCreator) createDefaultConfig(serverPath string) error {
	fmt.Println("‚öôÔ∏è  Creating default configuration...")
	
	configPath := filepath.Join(serverPath, "server.cfg")
	configContent := `# FiveM Server Configuration
# Generated by InkWash

# Server Info
sv_hostname "` + sc.config.Name + `"
sv_projectName "` + sc.config.Name + `"
sv_projectDesc "A FiveM Server created with InkWash"

# Server Settings
sv_maxclients 32
sv_licenseKey "changeme"
sets sv_enforceGameBuild 2802

# Resources
ensure mapmanager
ensure chat
ensure spawnmanager
ensure sessionmanager
ensure basic-gamemode
ensure hardcap
ensure baseevents

# Admin
add_ace group.admin command allow
add_ace group.admin command.quit deny
add_principal identifier.fivem:1 group.admin
`

	return os.WriteFile(configPath, []byte(configContent), 0644)
}